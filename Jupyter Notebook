# Step 1 - Import Libraries & Load Data
import pandas as pd
import os

# Check if the file exists
print("Is Total.csv available?:", os.path.exists("Total.csv"))

# Read the CSV dataset
df = pd.read_csv("Total.csv")

# Check the column names
print("Available columns:", df.columns.tolist())

# Display the first 5 rows
df.head()

# Step 2: Create a function to search for employee details
def get_employee_details(name):
    """
    Function to search for employee details based on name.
    Input:
        name (str) - employee's name
    Output:
        dict - employee details (single row of data)
    """
    try:
        # search name in the EmployeeName column (ignore case)
        result = df[df["EmployeeName"].str.lower() == name.lower()]
        
        if result.empty:
            return f"Employee '{name}' not found."
        
        # return the first row as a dictionary
        return result.to_dict('records')[0]
    
    except Exception as e:
        return f"An error occurred: {e}"

# example
get_employee_details("NATHANIEL FORD")

# === Step 3: Process Data with Dictionary ===

# 1. Convert DataFrame to a list of dictionaries
salary_data = df.to_dict('records')

# 2. Functions to process the data

def get_highest_paid_employee(data):
    """Find the employee with the highest TotalPayBenefits"""
    highest = None
    max_pay = -1
    for record in data:
        if record["TotalPayBenefits"] is not None and record["TotalPayBenefits"] > max_pay:
            max_pay = record["TotalPayBenefits"]
            highest = record
    return highest

def get_lowest_paid_employee(data):
    """Find the employee with the lowest TotalPayBenefits"""
    lowest = None
    min_pay = float("inf")
    for record in data:
        if record["TotalPayBenefits"] is not None and record["TotalPayBenefits"] < min_pay:
            min_pay = record["TotalPayBenefits"]
            lowest = record
    return lowest

def get_average_salary(data):
    """Calculate the average TotalPayBenefits of all employees"""
    total = 0
    count = 0
    for record in data:
        if record["TotalPayBenefits"] is not None:
            total += record["TotalPayBenefits"]
            count += 1
    return total / count if count > 0 else 0

def get_employees_by_year(data, year):
    """Filter employees by year"""
    return [record for record in data if record["Year"] == year]

def get_total_salary_by_year(data):
    """Calculate total salary per year"""
    salary_by_year = {}
    for record in data:
        year = record["Year"]
        pay = record["TotalPayBenefits"] if record["TotalPayBenefits"] is not None else 0
        salary_by_year[year] = salary_by_year.get(year, 0) + pay
    return salary_by_year


# 3. Run the processing and display results neatly

top = get_highest_paid_employee(salary_data)
low = get_lowest_paid_employee(salary_data)
avg = get_average_salary(salary_data)
employees_2011 = get_employees_by_year(salary_data, 2011)
total_by_year = get_total_salary_by_year(salary_data)

print("=== Salary Data Processing ===\n")

print(f"1. Highest Paid Employee:\n"
      f"   Name: {top['EmployeeName']}\n"
      f"   Job : {top['JobTitle']}\n"
      f"   Total Pay (with Benefits): ${top['TotalPayBenefits']:,.2f}\n")

print(f"2. Lowest Paid Employee:\n"
      f"   Name: {low['EmployeeName']}\n"
      f"   Job : {low['JobTitle']}\n"
      f"   Total Pay (with Benefits): ${low['TotalPayBenefits']:,.2f}\n")

print(f"3. Average Salary of All Employees:\n"
      f"   ${avg:,.2f}\n")

print(f"4. Number of Employees in 2011:\n"
      f"   {len(employees_2011)} employees\n")

print("5. Total Salary by Year:")
for year, total in total_by_year.items():
    print(f"   {year}: ${total:,.2f}")

# Step 4: Error Handling

def safe_get_highest_paid_employee(data):
    try:
        # 1. Check if dataset is empty
        if not data:
            raise ValueError("Dataset is empty, cannot search for employees.")

        highest = None
        max_pay = -1

        for record in data:
            # 2. Ensure the column exists
            if "TotalPayBenefits" not in record:
                raise KeyError("Column 'TotalPayBenefits' not found.")

            pay = record.get("TotalPayBenefits", None)

            # 3. Skip if value is None
            if pay is None:
                continue  

            # 4. Check for strange values (e.g., negative)
            if pay < 0:
                print(f"⚠️ Warning: negative value found ({pay}) for {record.get('EmployeeName', 'Unknown')}")
                continue  

            # 5. Update the employee with the highest pay
            if pay > max_pay:
                max_pay = pay
                highest = record

        # 6. Check final result
        if highest is None:
            raise ValueError("No employee with a valid salary found.")

        return highest

    # Handle specific errors
    except KeyError as e:
        print(f"❌ Error: Column not found - {e}")
        return None
    except ValueError as e:
        print(f"❌ Error: {e}")
        return None
    except Exception as e:
        # Catch-all for unexpected errors
        print(f"❌ An unexpected error occurred: {e}")
        return None

# Step 5: Export Employee Details

import pandas as pd
import zipfile
import os

def export_employee_to_zip(employee_name, data, zip_filename="Employee_Profile.zip"):
    # search for the employee data
    employee = next((emp for emp in data if emp["EmployeeName"] == employee_name), None)
    if not employee:
        print("Employee not found.")
        return

    # ensure the temp folder exists
    temp_folder = "temp_export"
    os.makedirs(temp_folder, exist_ok=True)

    # CSV filename based on employee name
    safe_name = employee_name.replace(" ", "_")
    csv_filename = f"{safe_name}.csv"
    csv_path = os.path.join(temp_folder, csv_filename)

    # save to CSV
    pd.DataFrame([employee]).to_csv(csv_path, index=False)

    # save to zip
    with zipfile.ZipFile(zip_filename, "a") as zf:  # use "a" to append
        zf.write(csv_path, arcname=os.path.join("Employee_Profile", csv_filename))

    # remove temp file and folder to keep it clean
    os.remove(csv_path)
    os.rmdir(temp_folder)

    print(f"Data for {employee_name} has been successfully exported to {zip_filename}")

# example
export_employee_to_zip("JUDY MELINEK", salary_data)
export_employee_to_zip("Colin I Clifford", salary_data)
export_employee_to_zip("Samantha W Lui", salary_data)
export_employee_to_zip("GUY GOODWIN", salary_data)
export_employee_to_zip("BRONWYN GUNDOGDU", salary_data)
export_employee_to_zip("CARYN BORTNICK", salary_data)
